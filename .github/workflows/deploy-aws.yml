name: Deploy Infrastructure and Services

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      # TODO: Fix this
      api_changed: ${{ steps.filter.outputs.api }}
      web_changed: ${{ steps.filter.outputs.web }}
      database_changed: ${{ steps.filter.outputs.database }}
    
    steps:
      - uses: actions/checkout@v3
      
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{ github.ref }}
          filters: |
            api:
              - 'apps/api-service/src/**'
              - 'package-lock.json'
            web:
              - 'apps/web-service/src/**'
              - 'package-lock.json'
            database:
              - 'packages/database/migrations/**'

  build-and-push:
    needs: check-changes
    runs-on: ubuntu-latest
    environment: production
    if: needs.check-changes.outputs.api_changed == 'true' || needs.check-changes.outputs.web_changed == 'true'

    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push API service
        if: needs.check-changes.outputs.api_changed == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ vars.STAGE_NAME }}-api-service:$IMAGE_TAG ./apps/api-service
          docker push $ECR_REGISTRY/${{ vars.STAGE_NAME }}-api-service:$IMAGE_TAG
          docker tag $ECR_REGISTRY/${{ vars.STAGE_NAME }}-api-service:$IMAGE_TAG $ECR_REGISTRY/${{ vars.STAGE_NAME }}-api-service:latest
          docker push $ECR_REGISTRY/${{ vars.STAGE_NAME }}-api-service:latest

      - name: Build and push Web service
        if: needs.check-changes.outputs.web_changed == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ vars.STAGE_NAME }}-web-service:$IMAGE_TAG ./apps/web-service
          docker push $ECR_REGISTRY/${{ vars.STAGE_NAME }}-web-service:$IMAGE_TAG
          docker tag $ECR_REGISTRY/${{ vars.STAGE_NAME }}-web-service:$IMAGE_TAG $ECR_REGISTRY/${{ vars.STAGE_NAME }}-web-service:latest
          docker push $ECR_REGISTRY/${{ vars.STAGE_NAME }}-web-service:latest

  deploy-infrastructure:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: infrastructure/environments/production
        run: terraform init

      # First apply - everything except ECS services
      - name: Terraform Apply Infrastructure
        working-directory: infrastructure/environments/production
        run: |
          terraform apply -auto-approve \
            -target=module.networking \
            -target=module.data \
            -target=module.data.aws_lambda_function.db_migrate \
            -target=module.data.aws_iam_role.lambda_role \
            -target=module.data.aws_iam_role_policy.lambda_policy \
            -target=module.data.aws_iam_role_policy.lambda_ssm \
            -target=module.monitoring \
            -target=module.ecs.aws_ecs_cluster.main \
            -target=module.ecs.aws_ecs_task_definition.api_service \
            -target=module.ecs.aws_ecs_task_definition.web_service \
            -target=module.ecs.aws_ssm_parameter.migration_status
        env:
          TF_VAR_database_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_grafana_admin_password: ${{ secrets.GRAFANA_PASSWORD }}
          TF_VAR_alert_email: ${{ secrets.ALERT_EMAIL }}

  run-migrations:
    needs: [deploy-infrastructure, check-changes]
    runs-on: ubuntu-latest
    environment: production
    if: needs.check-changes.outputs.database_changed == 'true'
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}


      - name: Run Migrations
        run: |
          aws lambda invoke \
            --function-name ${{ vars.STAGE_NAME }}-db-migrate \
            --payload '{}' \
            --log-type Tail \
            response.json \
            --query 'LogResult' --output text | base64 -d

          # Check if the Lambda execution was successful by looking for error keywords in logs
          LOGS=$(aws lambda invoke \
            --function-name ${{ vars.STAGE_NAME }}-db-migrate \
            --payload '{}' \
            --log-type Tail \
            response.json \
            --query 'LogResult' --output text | base64 -d)

          if echo "$LOGS" | grep -i "error\|exception\|failed"; then
            echo "Migration failed! Check the Lambda logs above."
            exit 1
          else
            echo "Migration completed successfully"
          fi

  deploy-services:
    needs: [run-migrations, check-changes]
    runs-on: ubuntu-latest
    environment: production
    if: needs.check-changes.outputs.api_changed == 'true' || needs.check-changes.outputs.web_changed == 'true'

    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: infrastructure/environments/production
        run: terraform init

      # Final apply - just the services
      - name: Deploy Services
        working-directory: infrastructure/environments/production
        run: |
          terraform apply -auto-approve \
            -target=module.ecs.aws_ecs_service.api_service \
            -target=module.ecs.aws_ecs_service.web_service
        env:
          TF_VAR_database_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_grafana_admin_password: ${{ secrets.GRAFANA_PASSWORD }}
          TF_VAR_alert_email: ${{ secrets.ALERT_EMAIL }}

      - name: Wait for Services to Stabilize
        run: |
          aws ecs wait services-stable \
            --cluster ${{ vars.STAGE_NAME }}-cluster \
            --services api-service web-service 
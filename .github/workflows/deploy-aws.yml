name: Deploy Infrastructure and Services

on:
  push:
    branches:
    # NOTE: we destroyed this infra to stop paying for it
    # - main
  workflow_dispatch:

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      api_changed: ${{ steps.filter.outputs.api }}
      web_changed: ${{ steps.filter.outputs.web }}
    
    steps:
      - uses: actions/checkout@v3
      
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{ github.ref }}
          filters: |
            api:
              - '/src/services/api-service/**'
              - 'package-lock.json'
            web:
              - '/src/services/web-service/**'
              - 'package-lock.json'

  ensure-ecr:
    needs: check-changes
    runs-on: ubuntu-latest
    environment: production
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: iac/aws/environments/production
        run: terraform init

      - name: Setup ECR Repositories
        working-directory: iac/aws/environments/production
        run: |
          terraform apply -auto-approve \
            -target=module.ecs.aws_ecr_repository.api_service \
            -target=module.ecs.aws_ecr_repository.web_service
        env:
          TF_VAR_alert_email: ${{ secrets.ALERT_EMAIL }}

  build-and-push:
    needs: [check-changes, ensure-ecr]
    runs-on: ubuntu-latest
    environment: production
    if: needs.check-changes.outputs.api_changed == 'true' || needs.check-changes.outputs.web_changed == 'true'
    outputs:
      build_succeeded: ${{ steps.set-result.outputs.success }}

    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push API service
        if: needs.check-changes.outputs.api_changed == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ vars.STAGE_NAME }}-api-service:$IMAGE_TAG ./src/services/api-service
          docker push $ECR_REGISTRY/${{ vars.STAGE_NAME }}-api-service:$IMAGE_TAG
          docker tag $ECR_REGISTRY/${{ vars.STAGE_NAME }}-api-service:$IMAGE_TAG $ECR_REGISTRY/${{ vars.STAGE_NAME }}-api-service:latest
          docker push $ECR_REGISTRY/${{ vars.STAGE_NAME }}-api-service:latest

      - name: Build and push Web service
        if: needs.check-changes.outputs.web_changed == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ vars.STAGE_NAME }}-web-service:$IMAGE_TAG ./src/services/web-service
          docker push $ECR_REGISTRY/${{ vars.STAGE_NAME }}-web-service:$IMAGE_TAG
          docker tag $ECR_REGISTRY/${{ vars.STAGE_NAME }}-web-service:$IMAGE_TAG $ECR_REGISTRY/${{ vars.STAGE_NAME }}-web-service:latest
          docker push $ECR_REGISTRY/${{ vars.STAGE_NAME }}-web-service:latest

      - name: Set Result
        id: set-result
        run: echo "success=true" >> $GITHUB_OUTPUT

  deploy-infrastructure:
    needs: [check-changes, build-and-push]
    if: always() && (needs.build-and-push.result == 'success' || needs.build-and-push.result == 'skipped')
    runs-on: ubuntu-latest
    environment: production
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: iac/aws/environments/production
        run: terraform init

      - name: Terraform Apply Infrastructure
        working-directory: iac/aws/environments/production
        run: |
          terraform apply -auto-approve
        env:
          TF_VAR_alert_email: ${{ secrets.ALERT_EMAIL }}

      - name: Force Redeploy Services if Changed
        if: needs.check-changes.outputs.api_changed == 'true' || needs.check-changes.outputs.web_changed == 'true'
        run: |
          if [[ "${{ needs.check-changes.outputs.api_changed }}" == "true" ]]; then
            aws ecs update-service \
              --cluster ${{ vars.STAGE_NAME }}-cluster \
              --service api-service \
              --force-new-deployment
          fi
          
          if [[ "${{ needs.check-changes.outputs.web_changed }}" == "true" ]]; then
            aws ecs update-service \
              --cluster ${{ vars.STAGE_NAME }}-cluster \
              --service web-service \
              --force-new-deployment
          fi

      # TODO: this really should wait for services to stabilize
      # - name: Wait for Services to Stabilize
      #   run: |
      #     aws ecs wait services-stable \
      #       --cluster ${{ vars.STAGE_NAME }}-cluster \
      #       --services api-service web-service

      # TODO: this really should be a step since we don't want to run it on every deploy
      #  but for now this is a quick fix
      - name: Run Migrations
        run: |
          aws lambda invoke \
            --function-name ${{ vars.STAGE_NAME }}-db-migrate \
            --payload '{}' \
            --log-type Tail \
            response.json \
            --query 'LogResult' --output text | base64 -d

          # Check if the Lambda execution was successful by looking for error keywords in logs
          LOGS=$(aws lambda invoke \
            --function-name ${{ vars.STAGE_NAME }}-db-migrate \
            --payload '{}' \
            --log-type Tail \
            response.json \
            --query 'LogResult' --output text | base64 -d)

          if echo "$LOGS" | grep -i "error\|exception\|failed"; then
            echo "Migration failed! Check the Lambda logs above."
            exit 1
          else
            echo "Migration completed successfully"
          fi 
